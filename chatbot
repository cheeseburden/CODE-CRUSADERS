import pyttsx3
from groq import Groq

# Initialize Groq client with your API key
client = Groq(api_key="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")

# Interview Prompt Template
base_prompt = """
Act as an interviewer for a {job_type} interview. Your job is to ask interview questions one by one related to the job type and evaluate the candidate's answers.

1. Ask questions related to the skills, experience, and problem-solving abilities relevant to the {job_type}.
2. After each response, evaluate the candidate's answer based on relevance, clarity, and completeness.
3. Provide constructive feedback and assign a score out of 10 for the response. Explain the reasoning for the score.
4. Continue to the next question until the candidate ends the interview.
5. Do not introduce yourself after every question.
6. Ask the questions one after the other, not just one question.
7. Do not say "Let's begin with the first question" every time.
8. Display the score after every question and give suggestions to improve the answer.
"""

def text_to_speech(text):
    # Initialize the TTS engine
    engine = pyttsx3.init()

    # Set properties (optional)
    engine.setProperty('rate', 150)  # Speed of speech
    engine.setProperty('volume', 0.9)  # Volume (0.0 to 1.0)

    # Speak the text
    engine.say(text)
    engine.runAndWait()  # Wait for the speech to finish

# Chatbot Function to interact with Groq API
def interview_chatbot(job_type, user_response=None):
    # Format the base prompt with the specific job type
    formatted_prompt = base_prompt.format(job_type=job_type)
    
    # Prepare the message list for the AI
    messages = [{"role": "system", "content": formatted_prompt}]
    if user_response:
        messages.append({"role": "user", "content": user_response})
    
    try:
        # Send request to Groq API
        response = client.chat.completions.create(
            model="llama3-70b-8192",  # Specify model name
            messages=messages,
            temperature=1,
            max_tokens=1024,
            top_p=1,
            stop=None,
        )
        # Return the AI's response
        return response.choices[0].message.content.strip()
    except Exception as e:
        print(f"Error: {e}")
        return "Sorry, there was an error with the interview process. Please try again."

# Main program
if __name__ == "__main__":
    # Get the job type from the user
    text_to_speech("What type of job preparation are you searching for?")
    job_type = input("What type of job preparation are you searching for? ").strip()
    print(f"\nPreparing for a {job_type} interview...\n")
    
    while True:
        # Get the chatbot's question
        question = interview_chatbot(job_type)
        print("Interviewer:", question)
        text_to_speech(question)
        
        # Get the user's response
        user_input = input("You: ").strip()
        
        if user_input.lower() in ['quit', 'break', 'stop', 'bye']:
            print("Goodbye! Best of luck with your interviews.")
            text_to_speech("Goodbye! Best of luck with your interviews.")
            break
        
        # Get feedback and next question
        feedback = interview_chatbot(job_type, user_response=user_input)
        print("Interviewer:", feedback)
        text_to_speech(feedback)
