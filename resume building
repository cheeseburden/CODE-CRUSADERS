pip install groq pypdf reportlab


from groq import Groq
from pypdf import PdfReader
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet
import os

# Initialize Groq client with your API key
client = Groq(api_key="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")

# Step 1: Read and extract text from PDF
def extract_pdf_text(pdf_path):
    reader = PdfReader(pdf_path)
    full_resume = ""
    for page in reader.pages:
        text = page.extract_text()
        if text:
            full_resume += "\n" + text
    return full_resume.strip()

# Step 2: Clean up the resume text (optional)
def clean_resume_text(raw_text):
    # Perform optional cleaning like removing extra whitespaces, headers, or footers
    return raw_text.strip()

# Step 3: Generate the prompt for Groq API
def generate_prompt(cleaned_resume):
    prompt = f"""
    Given the following resume content, make optimizations, improve structure, clarity, and conciseness, and return the result in LaTeX format. 
    Be sure to maintain important sections like Experience, Education, Skills, etc.
    
    Here is the resume content:
    ```
    {cleaned_resume}
    ```
    Return the result in LaTeX format enclosed in triple backticks.
    """
    return prompt

# Step 4: Send request to Groq API for optimization
def optimize_resume_with_groq(prompt):
    try:
        completion = client.chat.completions.create(
            model="llama3-70b-8192",  # Specify the model
            messages=[{"role": "user", "content": prompt}],
            temperature=1,
            max_tokens=1024,
            top_p=1,
            stop=None,
        )
        # Extract the LaTeX result from the API response
        result = completion.choices[0].message.content.strip()
        return result
    except Exception as e:
        print(f"Error during Groq API request: {e}")
        return None

# Step 5: Save LaTeX content to a .tex file
def save_latex_to_file(latex_content, output_path):
    with open(output_path, "w") as tex_file:
        tex_file.write(latex_content)

# Step 6: Compile LaTeX to PDF using Python
# Use Python's subprocess to call pdflatex (make sure LaTeX is installed)
def compile_latex_to_pdf(tex_file_path):
    try:
        import subprocess
        subprocess.run(["pdflatex", tex_file_path], check=True)
        print(f"PDF successfully generated: {tex_file_path.replace('.tex', '.pdf')}")
    except Exception as e:
        print(f"Error compiling LaTeX: {e}")

# Step 7: Generate PDF from LaTeX using ReportLab
def generate_pdf_from_latex(latex_content, output_pdf):
    # Create a PDF using ReportLab
    doc = SimpleDocTemplate(output_pdf, pagesize=letter)
    story = []

    # Use ReportLab's styles for formatting
    styles = getSampleStyleSheet()
    normal_style = styles['Normal']
    story.append(Spacer(1, 12))

    # Split latex content into lines and add them as paragraphs
    lines = latex_content.splitlines()
    for line in lines:
        if line.strip():  # Avoid empty lines
            story.append(Paragraph(line, normal_style))
            story.append(Spacer(1, 12))

    doc.build(story)
    print(f"PDF generated: {output_pdf}")

# Main workflow
if __name__ == "__main__":
    # Step 1: Extract text from PDF
    pdf_path = 'example.pdf'  # Path to the PDF file
    full_resume = extract_pdf_text(pdf_path)
    
    # Step 2: Clean the extracted resume text
    cleaned_resume = clean_resume_text(full_resume)
    
    # Step 3: Generate the prompt for Groq API
    prompt = generate_prompt(cleaned_resume)
    
    # Step 4: Send the prompt to Groq and get the LaTeX result
    latex_result = optimize_resume_with_groq(prompt)
    
    if latex_result:
        # Step 5: Save the LaTeX content to a .tex file
        tex_file_path = "optimized_resume.tex"
        save_latex_to_file(latex_result, tex_file_path)
        
        # Step 6: Compile LaTeX to PDF
        compile_latex_to_pdf(tex_file_path)
        
        # Alternatively, use ReportLab to generate a simple PDF
        # generate_pdf_from_latex(latex_result, "optimized_resume_reportlab.pdf")
    else:
        print("Failed to optimize resume using Groq API.")
